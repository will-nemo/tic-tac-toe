{"version":3,"sources":["components/Box.js","components/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","className","onClick","currentUser","hasValue","handleUnselect","index","handleSelect","icon","GameBoard","useState","setCurrentUser","gameWinner","setGameWinner","selectedIndex","setSelectedIndex","gameTied","setGameTied","isFinal","user","gameBoardBoxes","setGameBoardBoxes","handleUserSelect","temp","slice","i","length","splice","id","handleUserUnselect","gameFinishedCheck","winner","checkOneRow","val1","val2","val3","map","box","key","variant","size","pick","counter","Math","floor","random","computerMakesPick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b20be30.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Box(props) {\n\n  function handleBoxClick() {\n    if (props.currentUser === \"computer\") return;\n     \n    if (!props.hasValue) {\n      props.handleSelect(props.index);\n    }\n    else {\n      props.handleUnselect(props.index);\n    }\n  }\n\n  return (\n      <div className=\"box\" onClick={handleBoxClick}>\n            { props.hasValue && props.icon }\n      </div>\n  );\n}","import React, { useState } from 'react';\nimport Box from './Box';\n\nimport { FaTimes, FaCircleNotch } from 'react-icons/fa';\nimport Button from 'react-bootstrap/Button';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nexport default function GameBoard() {\n  const [currentUser, setCurrentUser] = useState(\"User\");\n  const [gameWinner, setGameWinner] = useState(null);\n  const [selectedIndex, setSelectedIndex] = useState(null);\n  const [gameTied, setGameTied] = useState(false);\n  const [gameBoardBoxes, setGameBoardBoxes] = useState([\n                                                        {hasValue: false, isFinal: false, icon: null, user: null}, \n                                                        {hasValue: false, isFinal: false, icon: null, user: null}, \n                                                        {hasValue: false, isFinal: false, icon: null, user: null}, \n                                                        {hasValue: false, isFinal: false, icon: null, user: null}, \n                                                        {hasValue: false, isFinal: false, icon: null, user: null}, \n                                                        {hasValue: false, isFinal: false, icon: null, user: null}, \n                                                        {hasValue: false, isFinal: false, icon: null, user: null}, \n                                                        {hasValue: false, isFinal: false, icon: null, user: null}, \n                                                        {hasValue: false, isFinal: false, icon: null, user: null}\n                                                      ]);\n                                                      \n\n  function handleUserSelect(index) {\n    if (gameWinner == null) {\n      let temp = gameBoardBoxes.slice();\n      for (let i = 0; i < gameBoardBoxes.length; i++) {\n        if (i !== index && !temp[i].isFinal) {\n          temp.splice(i, 1, {hasValue: false, isFinal: false, icon: null})\n        }\n        else if (!temp[i].isFinal) {\n          temp.splice(index, 1, {hasValue: true, isFinal: false, icon: <FaTimes id=\"timesIcon\"/>, user: \"User\"})\n          setSelectedIndex(index);\n        }\n      }\n      setGameBoardBoxes(temp);\n    }\n  }\n\n  function handleUserUnselect(index) {\n    let temp = gameBoardBoxes.slice();\n    if (!temp[index].isFinal) {\n      temp.splice(index, 1, {hasValue: false, icon: null})\n      setGameBoardBoxes(temp);\n      setSelectedIndex(null);\n    }\n  }\n\n  function handleSubmitClicked() {\n    if (selectedIndex != null) {\n      let temp = gameBoardBoxes.slice();\n      temp.splice(selectedIndex, 1, {hasValue: true, isFinal: true, icon: <FaTimes id=\"timesIcon\"/>, user: \"User\"});\n      setGameBoardBoxes(temp);\n\n      if (!gameFinishedCheck(temp)) {\n        setCurrentUser(\"Computer\");\n        computerMakesPick(temp);\n      }\n    }\n  }\n\n  function computerMakesPick(temp) {\n    if (gameWinner == null) {\n      let pick = null;\n      let counter = 0;\n      while (pick == null && counter < 10) {\n        let index = Math.floor(Math.random() * 9);\n        if (!temp[index].isFinal && index !== 9) {\n          temp.splice(index, 1, {hasValue: true, isFinal: true, icon: <FaCircleNotch id=\"timesIcon\"/>, user: \"Computer\"});\n          pick = index;\n          setGameBoardBoxes(temp);\n        }\n        counter++;\n      }\n\n      if (pick == null && counter > 8) {\n        setGameTied(true);\n      }\n      if (!gameFinishedCheck(temp)) {\n        setCurrentUser(\"User\");\n      }\n    }\n  }\n\n  function gameFinishedCheck(temp) {\n    let user = \"\";\n    let winner = null;\n    for (let i = 0; i < temp.length; i++) {\n        if (i === 0 && temp[i].isFinal) {\n            user = temp[i].user;\n            if (temp[1].isFinal && temp[1].user === user) {\n              if (temp[2].isFinal && temp[2].user === user) {\n                winner = user;\n              }\n              else {\n                user = \"\";\n              }\n            }\n            else if (temp[4].isFinal && temp[4].user === user) {\n              if (temp[8].isFinal && temp[8].user === user) {\n                winner = user;\n              }\n              else {\n                user = \"\";\n              }\n            }\n            else if (temp[3].isFinal && temp[3].user === user) {\n              if (temp[6].isFinal && temp[6].user === user) {\n                winner = user;\n              }\n              else {\n                user = \"\";\n              }\n            }\n            else {\n              user = \"\";\n            }\n        }\n\n        if (winner == null) {\n          winner = checkOneRow(temp, i, 1, 4, 7);\n        }\n\n        if (winner == null) {\n          if (i === 2 && temp[i].isFinal) {\n            user = temp[i].user;\n            if (temp[4].isFinal && temp[4].user === user) {\n              if (temp[6].isFinal && temp[6].user === user) {\n                winner = user;\n              }\n              else {\n                user = \"\";\n              }\n            }\n            else if (temp[5].isFinal && temp[5].user === user) {\n              if (temp[8].isFinal && temp[8].user === user) {\n                winner = user;\n              }\n              else {\n                user = \"\";\n              }\n            }\n            else {\n              user = \"\";\n            }\n          }\n        }\n\n        if (winner == null) {\n          winner = checkOneRow(temp, i, 3, 4, 5);\n        }\n        if (winner == null) {\n          winner = checkOneRow(temp, i, 6, 7, 8);\n        }\n    }\n\n    if(winner !== null) {\n      setGameWinner(winner);\n      return true;\n    }\n    return false;\n  }\n\n  function checkOneRow(temp, i, val1, val2, val3) {\n    let winner = null;\n    if (i === val1 && temp[i].isFinal) {\n      let user = temp[i].user;\n      if (temp[val2].isFinal && temp[val2].user === user) {\n        if (temp[val3].isFinal && temp[val3].user === user) {\n          winner = user;\n        }\n        else {\n          user = \"\";\n        }\n      }\n      else {\n        user = \"\";\n      }\n    }\n\n    return winner;\n  }\n\n  return (\n    <>\n      <div className=\"board\">\n              {gameBoardBoxes.map((box, index) =>\n                <Box key={index} \n                     handleSelect={handleUserSelect}\n                     handleUnselect={handleUserUnselect}\n                     index={index} \n                     hasValue={box.hasValue} \n                     icon={box.icon}\n                     currentUser={currentUser}/>\n              )}\n      </div>\n      {currentUser !== \"Computer\" && \n      <ButtonToolbar>\n        <Button variant=\"primary\" size=\"lg\" onClick={handleSubmitClicked}>\n            Submit turn\n        </Button>      \n      </ButtonToolbar>}\n      {gameWinner !== null &&\n      <h1>{gameWinner} Won!</h1>}\n      {(gameTied && gameWinner == null) &&\n      <h1>Tie!</h1>}\n    </>\n  );\n}","import React from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameBoard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}